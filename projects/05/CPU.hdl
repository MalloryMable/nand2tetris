// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Will ALU use Address or Memory
    Mux16(a=aRegister, b=inM, sel=instruction[12], out=mux0);
    
    //ALU
    ALU(x=dRegister, y=mux0,zx=instruction[11], nx=instruction[10], zy=instruction[9],  ny=instruction[8], f=instruction[7], no=instruction[6], out=outM,out=aluOut, zr=zr, ng=ng);

    //Takes the saved Address, comp/ALU, or the Address in the instruction
    Mux16(a=aRegister, b=aluOut, sel=instruction[5], out=mux1);
    Mux16(a=instruction, b=mux1, sel=instruction[15], out=mux2);

    //Will update address when MSB is 0 or when instructed to
    Not(in=instruction[15], out=opBit);
    Or(a=instruction[5], b=opBit, out=addyLoad);

    ARegister(in=mux2, load=addyLoad, out=aRegister, out[0..14]=addressM);
    
    //Ensures that an instruction is read and that we must save to D
    And(a=instruction[15], b=instruction[4], out=dLoad);
    DRegister(in=aluOut, load=dLoad, out=dRegister);

    //Greater than is defined by being both not Zero and Not Less Than
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);
    And(a=notZr, b=notNg, out=gt);

    //Checks each if each bit of jump code is true
    //Then, if it is checks the value at that postion
    Mux(a=false, b=ng, sel=instruction[2], out=ngMux);
    Mux(a=false, b=zr, sel=instruction[1], out=zrMux);
    Mux(a=false, b=gt, sel=instruction[0], out=gtMux);

    //Verifies that some jump code is true
    //Also verifies that the instruction code is instruction
    Or(a=ngMux,b=zrMux,out=jmpOr0);
    Or(a=jmpOr0, b=gtMux, out=jmpOr1);
    And(a=jmpOr1, b=instruction[15], out=jump);
    
    Not(in=jump,out=notJump);

    And(a=instruction[3], b=instruction[15], out=writeM);

    PC(in=aRegister,load=jump,inc=notJump,reset=reset,out[0..14]=pc);
}